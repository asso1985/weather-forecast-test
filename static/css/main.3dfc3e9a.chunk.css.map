{"version":3,"sources":["/home/travis/build/asso1985/weather-forecast-test/src/components/Current/_current.scss","/home/travis/build/asso1985/weather-forecast-test/src/components/Day/_day.scss","/home/travis/build/asso1985/weather-forecast-test/src/components/Hour/_hour.scss","/home/travis/build/asso1985/weather-forecast-test/src/components/DaysForecast/_days.scss","/home/travis/build/asso1985/weather-forecast-test/src/scss/utils/_generic.scss","/home/travis/build/asso1985/weather-forecast-test/src/scss/base/_generic.scss","/home/travis/build/asso1985/weather-forecast-test/src/scss/base/_typography.scss","/home/travis/build/asso1985/weather-forecast-test/src/scss/grids/_flex.scss","/home/travis/build/asso1985/weather-forecast-test/src/scss/abstracts/_functions.scss","/home/travis/build/asso1985/weather-forecast-test/src/scss/abstracts/_helpers.scss","/home/travis/build/asso1985/weather-forecast-test/src/scss/utils/_mediaquery.scss","/home/travis/build/asso1985/weather-forecast-test/src/index.scss"],"names":[],"mappings":"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","file":"main.3dfc3e9a.chunk.css","sourcesContent":[".c-current {\n  .c-current__desc {\n    color: #6495ed;\n    font-weight: bold;\n  }\n}",".c-day {\n  padding: 20px 0;\n  flex:1;\n  h3 {\n    margin:0 0 5px 0;\n  }\n\n  &:hover {\n    background-color: #6495ed;\n  }\n} ",".c-hour {\n  padding: 20px 0;\n  flex:1;\n  h3 {\n    margin:0 0 5px 0;\n  }\n} ",".c-days {\n  background-color: #0d1927;\n  border-radius: 10px;\n}",".u-height--full {\n    height: 100%;\n    min-height: 100%;\n}\n\n.u-text--center {\n   text-align: center;\n}","body {\n    margin: 0;\n    padding: 0;\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n    \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\n    sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n\n    /* Permalink - use to edit and share this gradient: http://colorzilla.com/gradient-editor/#00314c+0,0f1d3a+100 */\n    background: rgb(0,49,76); /* Old browsers */\n    background: -moz-linear-gradient(top, rgba(0,49,76,1) 0%, rgba(15,29,58,1) 100%); /* FF3.6-15 */\n    background: -webkit-linear-gradient(top, rgba(0,49,76,1) 0%,rgba(15,29,58,1) 100%); /* Chrome10-25,Safari5.1-6 */\n    background: linear-gradient(to bottom, rgba(0,49,76,1) 0%,rgba(15,29,58,1) 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#00314c', endColorstr='#0f1d3a',GradientType=0 ); /* IE6-9 */\n\n    color: #fff;\n}\n\nhtml, body {\n    min-height: 100vh;\n}","/*Typo*/\n\na {\n  color: inherit;\n  text-decoration: none;\n}\n\nsup {\n  font-size: 50%;\n}\n\n.t-size {\n  &--large {\n    font-size: 92px;\n  }\n\n  &--medium {\n    font-size: 42px;\n  }\n\n  &--small {\n    font-size: 20px;\n  }\n}","/* Flex classes */\n\n\n$flex__grid-name: flexgrid;\n\n$flex__grid-item: #{$flex__grid-name}__item;\n\n$flex__grid-gutter: $base__grid-gutter;\n\n.#{$flex__grid-name} {\n    display: flex !important;\n    flex-flow: row wrap;\n    margin: 0;\n    margin-left: -$flex__grid-gutter;\n    padding: 0;\n\n    // Halve gutter\n    &--narrow {\n        margin-left: - halve($flex__grid-gutter);\n\n        > .#{$flex__grid-item} {\n            padding-left: halve($flex__grid-gutter);\n        }\n    }\n\n    // Double gutter\n    &--wide {\n        margin-left: - double($flex__grid-gutter);\n\n        > .#{$flex__grid-item} {\n            padding-left: double($flex__grid-gutter);\n        }\n    }\n\n    // Avoid gutter\n    &--full {\n        margin-left: 0;\n\n        > .#{$flex__grid-item} {\n            padding-left: 0;\n        }\n    }    \n\n    // Avoid wrapping of elements\n    &--nowrap {\n        flex-wrap: nowrap;\n    }\n\n    // Alignment\n    &--center {\n        justify-content: center;\n    }\n\n    &--right {\n        justify-content: flex-end;\n        align-self: flex-end;\n    }\n\n    &--top {\n        align-items: flex-start;\n    }\n\n    &--middle {\n        align-items: center;\n    }\n\n    &--baseline {\n        align-items: baseline;\n\n        > .#{$flex__grid-item} {\n            align-self: baseline;\n        }\n    }\n\n    &--bottom {\n        align-items: flex-end;\n    }\n\n    // Ordering\n    &--reverse {\n        flex-direction: row-reverse;\n    }\n\n    &--column {\n        flex-direction: column;\n\n        > .#{$flex__grid-item} {\n            flex-basis: auto;\n        }\n    }\n\n    &--column-reverse {\n        flex-direction: column-reverse;\n    }\n\n    &--space-around {\n        justify-content: space-around;\n    }\n\n    &__item {\n        flex: 1 1 0%;\n        padding-left: 32px;\n    }\n\n    @media only screen and (max-width: 40em) {\n        &--stack-m > #{$flex__grid-item} {\n            flex-basis:100%;\n        }\n    }\n\n    @media only screen and (max-width: 48em) {\n        .flexgrid__item {\n            flex-basis:100%;\n        }\n    }    \n\n}\n\n\n/// Create both silent and solid classes for the items\n.#{$flex__grid-item} {\n\n    flex: 1 1 0%;\n    padding-left: $flex__grid-gutter;\n\n/*    @include vp-medium--max {\n        flex-basis: 100%;\n    }*/\n\n    &--fixed {\n        flex: 0 1 auto;\n    }\n\n    &--stretch {\n        flex: 1 1 auto;\n    }\n    \n    &--no-shrink {\n        flex: 1 0 auto;\n    }\n\n    &--top {\n        align-self: flex-start;\n    }\n\n    &--middle {\n        align-self: center;\n    }\n\n    &--bottom {\n        align-self: flex-end;\n    }\n\n    &--first {\n        order: -1;\n    }\n\n    &--last {\n        order: 1;\n    }\n\n    &--truncate {\n        min-width: 0;\n    }\n}\n\n.u-width-100 {\n    width: 100%;\n}","/* ------------------------------\n\n    Styleguide functions\n\n ----------------------------- */\n////\n/// Global utility functions\n/// @group Utility functions\n////\n\n/// Function allowing object extension as done in JavaScript\n/// (i.e.: Object.assign(), $.extend, etc.).\n/// @param {map} $map - first map\n/// @param {argList} $maps - other maps\n/// @param {bool} $deep - recursive mode\n/// @return {map}\n/// @example\n///     $opts: ();\n///     $opts: extend((\n///         icon-name: 'default',\n///         color: 'black',\n///         position: 'center center',\n///         size: 'cover',\n///         repeat: 'no-repeat',\n///         path: 'images'\n///     ), $opts);\n///     $config: extend($base__cta-opts, (\n///         props: (\n///             padding: 20px 15px\n///         )\n///     ), $opts, true);\n///\n@function extend($map, $maps.../*, $deep */) {\n    $last: nth($maps, -1);\n    $deep: $last == true;\n    $max: if($deep, length($maps) - 1, length($maps));\n    \n    // Loop through all maps in $maps...\n    @for $i from 1 through $max {\n        // Store current map\n        $current: nth($maps, $i);\n        \n        // If not in deep mode, simply merge current map with map\n        @if not $deep {\n            $map: map-merge($map, $current);\n        } @else {\n            // If in deep mode, loop through all tuples in current map\n            @each $key, $value in $current {\n                \n                // If value is a nested map and same key from map is a nested map as well\n                @if type-of($value) == 'map' and type-of(map-get($map, $key)) == 'map' {\n                    // Recursive extend\n                    $value: extend(map-get($map, $key), $value, true);\n                }\n                \n                // Merge current tuple with map\n                $map: map-merge($map, ($key: $value));\n            }\n        }\n    }\n    \n    @return $map;\n    \n}\n\n\n\n/// Utility to create a new map by deleting unused keys\n/// found in the passed-in list\n/// @param {map} $map Map to be updated\n/// @param {list} $list List holding the keys to be removed\n/// @returns {map}\n@function update-map($map, $list) {\n    \n    $new-map: $map;\n    \n    @if length($list) {\n        \n        $new-map: map-remove($map, $list...);\n        \n    }\n    \n    @return $new-map;\n    \n}\n\n/// Cast map to list\n/// @param {map} Map to be cast to  list\n/// @param {string} both|keys|values Choose what to return from the original map:\n/// its keys, its values or both.\n/// @returns {list}\n@function to-list($value, $keep: 'both') {\n    $keep: if(index('keys' 'values', $keep), $keep, 'both');\n    \n    @if type-of($value) == 'map' {\n        $keys: ();\n        $values: ();\n        \n        @each $key, $val in $value {\n            $keys: append($keys, $key);\n            $values: append($values, $val);\n        }\n        \n        @if $keep == 'keys' {\n            @return $keys;\n        } @else if $keep == 'values' {\n            @return $values;\n        } @else {\n            @return zip($keys, $values);\n        }\n    }\n    \n    @return if(type-of($value) != 'list', ($value, ), $value);\n    \n}\n\n/// Utility to strip unit from values\n/// @param {string} $value Original value\n/// @returns {number}\n@function strip-unit($value) {\n    @return $value / ($value * 0 + 1);\n}\n\n/// Utility to convert `em` values to unitless ones\n/// @param {string} $value Original value to be converted\n/// @returns {number}\n@function convert-em-to-unitless($value) {\n    $browser-default-font-size: 16;\n    \n    @return strip-unit($value) * $browser-default-font-size;\n}\n\n/// Divide a number by 4\n/// @param {number} $number\n@function quarter($number) {\n    @return round($number / 4);\n}\n\n/// Divide a number by 2\n/// @param {number} $number\n@function halve($number) {\n    @return round($number / 2);\n}\n\n/// Multiply a number by 2\n/// @param {number} $number\n@function double($number) {\n    @return round($number * 2);\n}\n\n/// Multiply a number by 3\n/// @param {number} $number\n@function triple($number) {\n    @return round($number * 3);\n}\n\n/// Multiply a number by 4\n/// @param {number} $number\n@function quadruple($number) {\n    @return round($number * 4);\n}\n\n/// Utility to check if a value exists\n/// @param {any} $val Value to check\n/// @return {boolean}\n@function get-value($val) {\n    \n    $return: if(type-of($val) == 'null', false, true);\n    \n    @return $return;\n    \n}\n\n/// Remove an item from a list at a specified index\n/// Can take static numeric index too:\n/// @param {list} $list The list to be manipulated\n/// @param {number} $index The index at which remove the element\n/// @example\n///     remove-nth($padding-list, -1);\n@function remove-nth($list, $index) {\n    $result: null;\n    \n    @if type-of($index) != number {\n        \n        @warn '$index: '#{quote($index)}' is not a number for `remove-nth`.';\n        \n    } @else if $index == 0 {\n        \n        @warn 'List index 0 must be a non-zero integer for `remove-nth`.';\n        \n    } @else if abs($index) > length($list) {\n        \n        @warn 'List index is '#{$index}' but list is only '#{length($list)}' item long for `remove-nth`.';\n        \n    } @else {\n        $result: ();\n        $index: if($index < 0, length($list) + $index + 1, $index);\n        \n        @for $i from 1 through length($list) {\n            @if $i != $index {\n                $result: append($result, nth($list, $i));\n            }\n        }\n    }\n    \n    @return $result;\n}\n\n\n/// Replace `$search` with `$replace` in `$string`\n/// @param {String} $string - Initial string\n/// @param {String} $search - Substring to replace\n/// @param {String} $replace ('') - New value\n/// @return {String} - Updated string\n@function str-replace($string, $search, $replace: '') {\n    $index: str-index($string, $search);\n    \n    @if $index {\n        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);\n    }\n    \n    @return $string;\n}\n\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n    $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\n    \n    @if not index(map-keys($units), $unit) {\n        @warn ('Invalid unit `#{$unit}`.');\n    }\n    \n    @return $value * map-get($units, $unit);\n}\n\n/// Casts a string into a number\n/// @param {String | Number} $value - Value to be parsed\n/// @return {Number}\n@function to-number($value) {\n    @if type-of($value) == 'number' {\n        @return $value;\n    } @else if type-of($value) != 'string' {\n        @warn('Value for `to-number` should be a number or a string.');\n    }\n    \n    $result: 0;\n    $digits: 0;\n    $minus: str-slice($value, 1, 1) == '-';\n    $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n    \n    @for $i from if($minus, 2, 1) through str-length($value) {\n        $character: str-slice($value, $i, $i);\n        \n        @if not (index(map-keys($numbers), $character) or $character == '.') {\n            @return to-length(if($minus, -$result, $result), str-slice($value, $i))\n        }\n        \n        @if $character == '.' {\n            $digits: 1;\n        } @else if $digits == 0 {\n            $result: $result * 10 + map-get($numbers, $character);\n        } @else {\n            $digits: $digits * 10;\n            $result: $result + map-get($numbers, $character) / $digits;\n        }\n    }\n    \n    @return if($minus, -$result, $result);\n}\n\n/// Map deep get\n/// @param {Map} $map - Map\n/// @param {Arglist} $keys - Key chain\n/// @return {*} - Desired value\n/// @example\n///     $opts: (\n///         afterRules: (\n///             base: (\n///                 width: #{$checkbox-toggler__bullet-width}px,\n///                 border-radius: $radius-circle,\n///                 opacity: $alpha-full,\n///             ),\n///         ),\n///     );\n///     $baseAfterRules: map-deep-get($opts, afterRules, base);\n@function map-deep-get($map, $keys...) {\n    @each $key in $keys {\n        $map: map-get($map, $key);\n    }\n    @return $map;\n}\n\n/// Convert a pixel based value to `rem` value\n/// @param {Number} $val\n/// @return {String}\n@function to-rem($val) {\n    @return to-length($val / 10, rem);\n}\n\n/// Trim spaces from a string\n/// @param {String} $str\n/// @return {String}\n@function trim($str) {\n    @while (str-index($str, ' ') != null) {\n        $index: str-index($str, ' ');\n        $str: \"#{str-slice($str, 0, $index - 1)}#{str-slice($str, $index + 1)}\";\n    }\n    @return $str;\n}\n\n\n@function halve($number) {\n    @return round($number / 2);\n}\n\n@function double($number) {\n    @return round($number * 2);\n}","@mixin class-type($name) {\n        .#{$name},\n        %#{$name} {\n                @content\n        }\n}\n\n@mixin make-rule($value, $rule) {\n        @if type-of($value) == 'list' {\n                font-size: nth($value, 1);\n                @if (length($value) > 1) {\n                 line-height: nth($value, 2);\n                }\n        } @else {\n                #{$rule}: #{$value};\n        }\n}\n\n@mixin rem($property, $values.../*, $important */) {\n    $last: nth($values, -1);\n    $important: $last == true;\n    $use-important: if($important, '!important', '');\n    $n: if($important, length($values) - 1, length($values));\n    $i: 1;\n    $remlist: ();\n\n    @while $i <= $n {\n\n        $itemVal: nth($values, $i);\n\n        @if $itemVal != 'auto' {\n\n            $remlist: append($remlist, ($itemVal / 10) + rem);\n\n        } @else {\n            $remlist: append($remlist, auto);\n        }\n\n        $i: $i + 1;\n    }\n\n    #{$property}: $remlist #{$use-important};\n\n}","/* ------------------------------\n\n  Media Queries Mixins\n\n ----------------------------- */\n\n////\n/// Create mixins to manage MQs. The approach is mobile-first, so all MQ starts from a min-width,\n/// but there are also MQs available for max-width, suffixed with `--max`:\n/// vp-small--max\n/// @group Media queries\n////\n\n/// Collect all breakpoints to be passed to MQ\n/// @type {map}\n$breakpoints: (\n        small-x  : 30em, // 480px\n        small-m  : 35em, // 560px\n        small    : 40em, // 640px\n        medium   : 48em, // 768px\n        medium-x : 50em, // 800px\n        large    : 64em, // 1024px\n        large-m  : 64.1em, // 1025px\n        large-x  : 75em, // 1200px\n        large-xl : 80em, // 1280px\n        large-xx : 100em // 1600px\n);\n\n\n/// Collect all breakpoints types\n/// @type {map}\n$breakpoints-types: (\n        min: min,\n        max: max,\n);\n\n///\n/// @content Styles for this mediaquery\n/// @example\n///     @include vp-large-xx { ... }\n///\n@mixin vp-large-xx {\n        @media only screen and (min-width: map-get($breakpoints, large-xx)) { /* 1600px */\n                @content;\n        }\n}\n\n///\n/// @content Styles for this mediaquery\n/// @example\n///     @include vp-large-xl { ... }\n///\n@mixin vp-large-xl {\n        @media only screen and (min-width: map-get($breakpoints, large-xl)) { /* 1280px */\n                @content;\n        }\n}\n\n///\n/// @content Styles for this mediaquery\n/// @example\n///     @include vp-large-xl--max { ... }\n///\n@mixin vp-large-xl--max {\n        @media only screen and (max-width: map-get($breakpoints, large-xl)) { /* 1280px */\n                @content;\n        }\n}\n\n///\n/// @content Styles for this mediaquery\n/// @example\n///     @include vp-large-x { ... }\n///\n@mixin vp-large-x {\n        @media only screen and (min-width: map-get($breakpoints, large-x)) { /* 1200px */\n                @content;\n        }\n}\n\n///\n/// @content Styles for this mediaquery\n/// @example\n///     @include vp-large-x--max { ... }\n///\n@mixin vp-large-x--max {\n        @media only screen and (max-width: map-get($breakpoints, large-x)) { /* 1200px */\n                @content;\n        }\n}\n\n///\n/// @content Styles for this mediaquery\n/// @example\n///     @include vp-large-m { ... }\n///\n@mixin vp-large-m {\n        @media only screen and (min-width: map-get($breakpoints, large-m)) { /* 1050px */\n                @content;\n        }\n}\n\n///\n/// Mediaquery up to `large-m` breakpoint\n/// @content Styles for this mediaquery\n/// @example\n///     @include vp-large-m--max { ... }\n///\n@mixin vp-large-m--max {\n        @media only screen and (max-width: map-get($breakpoints, large-m)) { /* 1050px */\n                @content;\n        }\n}\n\n///\n/// @content Styles for this mediaquery\n/// @example\n///     @include vp-large { ... }\n///\n@mixin vp-large {\n        @media only screen and (min-width: map-get($breakpoints, large)) { /* 1024px */\n                @content;\n        }\n}\n\n///\n/// Mediaquery up to `large` breakpoint\n/// @content Styles for this mediaquery\n/// @example\n///     @include vp-large--max { ... }\n///\n@mixin vp-large--max {\n        @media only screen and (max-width: map-get($breakpoints, large)) { /* 1024px */\n                @content;\n        }\n}\n\n///\n/// @content Styles for this mediaquery\n/// @example\n///     @include vp-medium-x { ... }\n///\n@mixin vp-medium-x {\n        @media only screen and (min-width: map-get($breakpoints, medium-x)) { /* 800px */\n                @content;\n        }\n}\n\n///\n/// Mediaquery up to `medium-x` breakpoint\n/// @content Styles for this mediaquery\n/// @example\n///     @include vp-medium-x--max { ... }\n///\n@mixin vp-medium-x--max {\n        @media only screen and (max-width: map-get($breakpoints, medium-x)) { /* 800px */\n                @content;\n        }\n}\n\n///\n/// @content Styles for this mediaquery\n/// @example\n///     @include vp-medium { ... }\n///\n@mixin vp-medium {\n        @media only screen and (min-width: map-get($breakpoints, medium)) { /* 768px */\n                @content;\n        }\n}\n\n///\n/// Mediaquery up to `medium` breakpoint\n/// @content Styles for this mediaquery\n/// @example\n///     @include vp-medium--max { ... }\n///\n@mixin vp-medium--max {\n        @media only screen and (max-width: map-get($breakpoints, medium)) { /* 768px */\n                @content;\n        }\n}\n\n///\n/// @content Styles for this mediaquery\n/// @example\n///     @include vp-small { ... }\n///\n@mixin vp-small {\n        @media only screen and (min-width: map-get($breakpoints, small)) { /* 640px */\n                @content;\n        }\n}\n\n///\n/// Mediaquery up to `small` breakpoint\n/// @content Styles for this mediaquery\n/// @example\n///     @include vp-small--max { ... }\n///\n@mixin vp-small--max {\n        @media only screen and (max-width: map-get($breakpoints, small)) { /* 640px */\n                @content;\n        }\n}\n\n///\n/// @content Styles for this mediaquery\n/// @example\n///     @include vp-small-m { ... }\n///\n@mixin vp-small-m {\n        @media only screen and (min-width: map-get($breakpoints, small-m)) { /* 560px */\n                @content;\n        }\n}\n\n///\n/// Mediaquery up to `small-m` breakpoint\n/// @content Styles for this mediaquery\n/// @example\n///     @include vp-small-m--max { ... }\n///\n@mixin vp-small-m--max {\n        @media only screen and (max-width: map-get($breakpoints, small-m)) { /* 560px */\n                @content;\n        }\n}\n\n///\n/// @content Styles for this mediaquery\n/// @example\n///     @include vp-small-x { ... }\n///\n@mixin vp-small-x {\n        @media only screen and (min-width: map-get($breakpoints, small-x)) { /* 480px */\n                @content;\n        }\n}\n\n///\n/// Mediaquery up to `small-x` breakpoint\n/// @content Styles for this mediaquery\n/// @example\n///     @include vp-small-x--max { ... }\n///\n@mixin vp-small-x--max {\n        @media only screen and (max-width: map-get($breakpoints, small-x)) { /* 480px */\n                @content;\n        }\n}\n\n\n///\n/// Generic Mediaquery mixin that can be used to dynamically get a meadia query\n/// @content Styles for this mediaquery\n/// @example\n///     @include vp(small, max) { ... }\n///\n@mixin vp($breakpoint, $type) {\n        @media only screen and (#{map-get($breakpoints-types, $type)}-width: map-get($breakpoints, $breakpoint)) {\n                @content;\n        }\n}\n\n///\n/// Media query detection\n/// Inject Break point name in the DOM for debugging purpose\n/// @example\n///       @include define-breakpoint('vp-small-x');\n///\n@mixin define-breakpoint($name) {\n        &::after {\n                content: $name;\n                display: none;\n        }\n}\n","@import 'scss/abstracts/functions';\n@import 'scss/abstracts/helpers';\n@import 'scss/abstracts/variables';\n@import 'scss/utils/mediaquery';\n@import 'scss/utils/generic';\n@import 'scss/base/generic';\n@import 'scss/base/typography';\n@import 'scss/grids/flex';\n@import 'scss/utils/spacing';\n\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n    \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  background-color:#f2f2f2;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\",\n    monospace;\n}\n\nbutton {\n  background-color: #fff;\n  border:0;\n  color: #6495ed;\n  border-radius: 4px;\n  cursor: pointer;\n\n  &:hover {\n   background-color: #6495ed;\n   color: #fff;\n  }\n}\n\n#root {\n    height: 100vh;\n}\n\n.container {\n  max-width: 800px;\n  margin: 0 auto;\n  height: 60vh;\n}\n\n/*Colors*/\n\n.color--white {\n    color:#fff;  \n}\n\n.color--gray-light {\n    color:#ddd;  \n}\n\nsvg {\n  color: white;\n}\n\n"]}