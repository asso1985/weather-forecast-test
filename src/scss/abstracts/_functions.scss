/* ------------------------------

    Styleguide functions

 ----------------------------- */
////
/// Global utility functions
/// @group Utility functions
////

/// Function allowing object extension as done in JavaScript
/// (i.e.: Object.assign(), $.extend, etc.).
/// @param {map} $map - first map
/// @param {argList} $maps - other maps
/// @param {bool} $deep - recursive mode
/// @return {map}
/// @example
///     $opts: ();
///     $opts: extend((
///         icon-name: 'default',
///         color: 'black',
///         position: 'center center',
///         size: 'cover',
///         repeat: 'no-repeat',
///         path: 'images'
///     ), $opts);
///     $config: extend($base__cta-opts, (
///         props: (
///             padding: 20px 15px
///         )
///     ), $opts, true);
///
@function extend($map, $maps.../*, $deep */) {
    $last: nth($maps, -1);
    $deep: $last == true;
    $max: if($deep, length($maps) - 1, length($maps));
    
    // Loop through all maps in $maps...
    @for $i from 1 through $max {
        // Store current map
        $current: nth($maps, $i);
        
        // If not in deep mode, simply merge current map with map
        @if not $deep {
            $map: map-merge($map, $current);
        } @else {
            // If in deep mode, loop through all tuples in current map
            @each $key, $value in $current {
                
                // If value is a nested map and same key from map is a nested map as well
                @if type-of($value) == 'map' and type-of(map-get($map, $key)) == 'map' {
                    // Recursive extend
                    $value: extend(map-get($map, $key), $value, true);
                }
                
                // Merge current tuple with map
                $map: map-merge($map, ($key: $value));
            }
        }
    }
    
    @return $map;
    
}



/// Utility to create a new map by deleting unused keys
/// found in the passed-in list
/// @param {map} $map Map to be updated
/// @param {list} $list List holding the keys to be removed
/// @returns {map}
@function update-map($map, $list) {
    
    $new-map: $map;
    
    @if length($list) {
        
        $new-map: map-remove($map, $list...);
        
    }
    
    @return $new-map;
    
}

/// Cast map to list
/// @param {map} Map to be cast to  list
/// @param {string} both|keys|values Choose what to return from the original map:
/// its keys, its values or both.
/// @returns {list}
@function to-list($value, $keep: 'both') {
    $keep: if(index('keys' 'values', $keep), $keep, 'both');
    
    @if type-of($value) == 'map' {
        $keys: ();
        $values: ();
        
        @each $key, $val in $value {
            $keys: append($keys, $key);
            $values: append($values, $val);
        }
        
        @if $keep == 'keys' {
            @return $keys;
        } @else if $keep == 'values' {
            @return $values;
        } @else {
            @return zip($keys, $values);
        }
    }
    
    @return if(type-of($value) != 'list', ($value, ), $value);
    
}

/// Utility to strip unit from values
/// @param {string} $value Original value
/// @returns {number}
@function strip-unit($value) {
    @return $value / ($value * 0 + 1);
}

/// Utility to convert `em` values to unitless ones
/// @param {string} $value Original value to be converted
/// @returns {number}
@function convert-em-to-unitless($value) {
    $browser-default-font-size: 16;
    
    @return strip-unit($value) * $browser-default-font-size;
}

/// Divide a number by 4
/// @param {number} $number
@function quarter($number) {
    @return round($number / 4);
}

/// Divide a number by 2
/// @param {number} $number
@function halve($number) {
    @return round($number / 2);
}

/// Multiply a number by 2
/// @param {number} $number
@function double($number) {
    @return round($number * 2);
}

/// Multiply a number by 3
/// @param {number} $number
@function triple($number) {
    @return round($number * 3);
}

/// Multiply a number by 4
/// @param {number} $number
@function quadruple($number) {
    @return round($number * 4);
}

/// Utility to check if a value exists
/// @param {any} $val Value to check
/// @return {boolean}
@function get-value($val) {
    
    $return: if(type-of($val) == 'null', false, true);
    
    @return $return;
    
}

/// Remove an item from a list at a specified index
/// Can take static numeric index too:
/// @param {list} $list The list to be manipulated
/// @param {number} $index The index at which remove the element
/// @example
///     remove-nth($padding-list, -1);
@function remove-nth($list, $index) {
    $result: null;
    
    @if type-of($index) != number {
        
        @warn '$index: '#{quote($index)}' is not a number for `remove-nth`.';
        
    } @else if $index == 0 {
        
        @warn 'List index 0 must be a non-zero integer for `remove-nth`.';
        
    } @else if abs($index) > length($list) {
        
        @warn 'List index is '#{$index}' but list is only '#{length($list)}' item long for `remove-nth`.';
        
    } @else {
        $result: ();
        $index: if($index < 0, length($list) + $index + 1, $index);
        
        @for $i from 1 through length($list) {
            @if $i != $index {
                $result: append($result, nth($list, $i));
            }
        }
    }
    
    @return $result;
}


/// Replace `$search` with `$replace` in `$string`
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);
    
    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }
    
    @return $string;
}

/// Add `$unit` to `$value`
///
/// @param {Number} $value - Value to add unit to
/// @param {String} $unit - String representation of the unit
///
/// @return {Number} - `$value` expressed in `$unit`
///
@function to-length($value, $unit) {
    $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);
    
    @if not index(map-keys($units), $unit) {
        @warn ('Invalid unit `#{$unit}`.');
    }
    
    @return $value * map-get($units, $unit);
}

/// Casts a string into a number
/// @param {String | Number} $value - Value to be parsed
/// @return {Number}
@function to-number($value) {
    @if type-of($value) == 'number' {
        @return $value;
    } @else if type-of($value) != 'string' {
        @warn('Value for `to-number` should be a number or a string.');
    }
    
    $result: 0;
    $digits: 0;
    $minus: str-slice($value, 1, 1) == '-';
    $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);
    
    @for $i from if($minus, 2, 1) through str-length($value) {
        $character: str-slice($value, $i, $i);
        
        @if not (index(map-keys($numbers), $character) or $character == '.') {
            @return to-length(if($minus, -$result, $result), str-slice($value, $i))
        }
        
        @if $character == '.' {
            $digits: 1;
        } @else if $digits == 0 {
            $result: $result * 10 + map-get($numbers, $character);
        } @else {
            $digits: $digits * 10;
            $result: $result + map-get($numbers, $character) / $digits;
        }
    }
    
    @return if($minus, -$result, $result);
}

/// Map deep get
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Key chain
/// @return {*} - Desired value
/// @example
///     $opts: (
///         afterRules: (
///             base: (
///                 width: #{$checkbox-toggler__bullet-width}px,
///                 border-radius: $radius-circle,
///                 opacity: $alpha-full,
///             ),
///         ),
///     );
///     $baseAfterRules: map-deep-get($opts, afterRules, base);
@function map-deep-get($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}

/// Convert a pixel based value to `rem` value
/// @param {Number} $val
/// @return {String}
@function to-rem($val) {
    @return to-length($val / 10, rem);
}

/// Trim spaces from a string
/// @param {String} $str
/// @return {String}
@function trim($str) {
    @while (str-index($str, ' ') != null) {
        $index: str-index($str, ' ');
        $str: "#{str-slice($str, 0, $index - 1)}#{str-slice($str, $index + 1)}";
    }
    @return $str;
}


@function halve($number) {
    @return round($number / 2);
}

@function double($number) {
    @return round($number * 2);
}